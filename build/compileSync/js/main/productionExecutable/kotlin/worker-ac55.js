(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js', './kobweb-frontend-kobweb-worker-interface.js', './kobweb-frontend-kobweb-worker.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'), require('./kobweb-frontend-kobweb-worker-interface.js'), require('./kobweb-frontend-kobweb-worker.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'worker-ac55'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'worker-ac55'.");
    }
    if (typeof globalThis['kobweb-frontend-kobweb-worker-interface'] === 'undefined') {
      throw new Error("Error loading module 'worker-ac55'. Its dependency 'kobweb-frontend-kobweb-worker-interface' was not found. Please, check whether 'kobweb-frontend-kobweb-worker-interface' is loaded prior to 'worker-ac55'.");
    }
    if (typeof globalThis['kobweb-frontend-kobweb-worker'] === 'undefined') {
      throw new Error("Error loading module 'worker-ac55'. Its dependency 'kobweb-frontend-kobweb-worker' was not found. Please, check whether 'kobweb-frontend-kobweb-worker' is loaded prior to 'worker-ac55'.");
    }
    globalThis['worker-ac55'] = factory(typeof globalThis['worker-ac55'] === 'undefined' ? {} : globalThis['worker-ac55'], globalThis['kotlin-kotlin-stdlib'], globalThis['kobweb-frontend-kobweb-worker-interface'], globalThis['kobweb-frontend-kobweb-worker']);
  }
}(function (_, kotlin_kotlin, kotlin_com_varabyte_kobweb_kobweb_worker_interface, kotlin_com_varabyte_kobweb_kobweb_worker) {
  'use strict';
  //region block: imports
  var Unit_instance = kotlin_kotlin.$_$.c2;
  var THROW_CCE = kotlin_kotlin.$_$.f9;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.x;
  var Companion_getInstance = kotlin_com_varabyte_kobweb_kobweb_worker_interface.$_$.d;
  var WorkerContext = kotlin_com_varabyte_kobweb_kobweb_worker_interface.$_$.a;
  var VOID = kotlin_kotlin.$_$.e;
  var to = kotlin_kotlin.$_$.u9;
  var json = kotlin_kotlin.$_$.q6;
  var add = kotlin_kotlin.$_$.p5;
  var protoOf = kotlin_kotlin.$_$.x6;
  var postInput$default = kotlin_com_varabyte_kobweb_kobweb_worker_interface.$_$.c;
  var Worker_0 = kotlin_com_varabyte_kobweb_kobweb_worker_interface.$_$.b;
  var initMetadataForClass = kotlin_kotlin.$_$.f6;
  var createPassThroughSerializer = kotlin_com_varabyte_kobweb_kobweb_worker.$_$.a;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(EchoWorker, 'EchoWorker', EchoWorker, VOID, [Worker_0]);
  initMetadataForClass(EchoWorkerFactory, 'EchoWorkerFactory', EchoWorkerFactory);
  //endregion
  function EchoWorker$_init_$lambda_s3ddo8(_this__u8e3s4, it) {
    return Unit_instance;
  }
  function EchoWorker$worker$lambda(this$0) {
    return function (e) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var json = e.data;
      var tmp;
      try {
        var tmp_0 = json['_output'];
        tmp = this$0.hi_1.fi((!(tmp_0 == null) ? typeof tmp_0 === 'string' : false) ? tmp_0 : THROW_CCE());
      } catch ($p) {
        var tmp_1;
        if ($p instanceof Error) {
          var e_0 = $p;
          var tmp_2 = console;
          // Inline function 'kotlin.text.buildString' call
          // Inline function 'kotlin.apply' call
          var this_0 = StringBuilder_init_$Create$();
          // Inline function 'org.akilincarslan.ahrarwood.worker.EchoWorker.worker.<anonymous>.<anonymous>.<anonymous>' call
          this_0.a8('Unable to deserialize output generated by worker, ignoring it.');
          var tmp0_safe_receiver = e_0.message;
          if (tmp0_safe_receiver == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            // Inline function 'org.akilincarslan.ahrarwood.worker.EchoWorker.worker.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
            this_0.a8('\nException: ' + tmp0_safe_receiver);
          }
          var tmp$ret$4 = this_0.toString();
          tmp_2.warn(tmp$ret$4);
          tmp_1 = null;
        } else {
          throw $p;
        }
        tmp = tmp_1;
      }
      var outputDeserialized = tmp;
      var tmp_3;
      if (!(outputDeserialized == null)) {
        var ctx = new WorkerContext(Companion_getInstance().uh(json));
        tmp_3 = this$0.gi_1(ctx, outputDeserialized);
      }
      return Unit_instance;
    };
  }
  function EchoWorker(onOutput) {
    var tmp;
    if (onOutput === VOID) {
      tmp = EchoWorker$_init_$lambda_s3ddo8;
    } else {
      tmp = onOutput;
    }
    onOutput = tmp;
    this.gi_1 = onOutput;
    this.hi_1 = (new EchoWorkerFactory()).ji();
    var tmp_0 = this;
    // Inline function 'kotlin.apply' call
    var this_0 = new Worker('_kobweb/workers/org-akilincarslan-ahrarwood-worker/worker-ac55.js');
    // Inline function 'org.akilincarslan.ahrarwood.worker.EchoWorker.worker.<anonymous>' call
    this_0.onmessage = EchoWorker$worker$lambda(this);
    tmp_0.ii_1 = this_0;
  }
  protoOf(EchoWorker).ki = function (input, transferables) {
    var tmp;
    try {
      tmp = this.hi_1.ei(input);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        tmp_0 = null;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var inputSerialized = tmp;
    if (!(inputSerialized == null)) {
      this.ii_1.postMessage(add(json([to('_input', inputSerialized)]), transferables.xh()), transferables.yh());
    }
  };
  protoOf(EchoWorker).ai = function (input, transferables) {
    return this.ki((!(input == null) ? typeof input === 'string' : false) ? input : THROW_CCE(), transferables);
  };
  protoOf(EchoWorker).ci = function () {
    this.ii_1.terminate();
  };
  function EchoWorkerFactory() {
  }
  protoOf(EchoWorkerFactory).ji = function () {
    return createPassThroughSerializer(this);
  };
  //region block: post-declaration
  protoOf(EchoWorker).bi = postInput$default;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = EchoWorker;
  //endregion
  return _;
}));

//# sourceMappingURL=worker-ac55.js.map
